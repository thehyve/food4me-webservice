---
swagger: '2.0'
info:
  version: "1.0.0"
  title: Personalized Dietary Advice Service
  description: |
    The PDAS is a web-service based on the Food4Me level 3 advices. The service uses 
    Food Intake, biomarkers from bloodanalysis, SNP data and other body metrics 
    (weight, BMI etc) as input. The service consists of two databases, one that 
    contains guidelines and information like Daily, Recommended Intake values 
    etc, etc. These values are used as cut-off values for the actual decision 
    trees, the second database. The decision trees originate from the food4me 
    project and lead to personal dietary advices. 
    
    Server code is available [here](https://github.com/thehyve/food4me-webservice). 
    Please note that the server code doesn't contain the actual guidelines and 
    decision trees.
    
host: qualify.thehyve.net
basePath: /pdas
schemes:
  - http
  - https
produces:
  - application/json
  - text/html  
securityDefinitions:
  api_key:
    type: apiKey
    description: An API key obtained from the QSP Developer portal
    name: api_key
    in: header
paths:
  /{language}/advices.{format}:
    get:
      summary: Retrieve advices based on a set of measurements
      description: | 
        Given a set of measurements, a status for each is computed for each 
        measurement. The status is used within a set of decision trees to 
        determine relevant advices.
        
        A full set of parameters depends on the data that has been loaded. See
        /properties for a list of supported properties. The properties should be 
        provided in the form {group}.{propertyname}(.{modifier}). Some examples
        are shown below.
      parameters:
        - name: language
          in: path
          type: string
          description: "ISO 639-1 language code of the language to return."
          required: true
          enum: [en,nl]
        - name: generic.age
          in: query
          description: Age in years
          required: true
          type: number
          format: integer
        - name: generic.gender
          in: query
          description: Gender
          required: true
          type: string
          enum: [Male, Female]
        - name: nutrient.protein.from food
          in: query
          description: The amount of protein intake from food
          required: true
          type: number
          format: double
      security:
       - api_key: []
      responses:
        200:
          description: Returns a list of advices 
          schema:
            type: array
            items:
              $ref: '#/definitions/Advice'          
        401:
          description: "Unauthorized: provide a valid API key"
        403:
          description: "Forbidden: the provided API key is invalid"
        404:
          description: "The language is not supported"
        500:
          description: "An internal error occurred"
  /status.{format}:
    get:
      summary: Retrieve the status based on a set of measurements
      description: | 
        Given a set of measurements, a status for each is computed for each 
        measurement. The status depends on the reference values as loaded 
        into the system.
        
        A full set of parameters depends on the data that has been loaded. See
        /properties for a list of supported properties. The properties should be 
        provided in the form {group}.{propertyname}(.{modifier}). Some examples
        are shown below.
      parameters:
        - name: generic.age
          in: query
          description: Age in years
          required: true
          type: number
          format: integer
        - name: generic.gender
          in: query
          description: Gender
          required: true
          type: string
          enum: [Male, Female]
      security:
       - api_key: []
      responses:
        200:
          description: |
            Returns a list with the status for the given measurements. The status
            may depend on other measurements than the measurement itself. For example
            the status for waist circumference depends on the gender.
          schema:
            type: array
            items:
              $ref: '#/definitions/StatusValue'
        401:
          description: "Unauthorized: provide a valid API key"
        403:
          description: "Forbidden: the provided API key is invalid"
        500:
          description: "An internal error occurred"
  /references.{format}:
    get:
      summary: Retrieve the references for one or more properties
      description: | 
        A set of reference values is returned for the properties specified
        in the URL. Some reference values are dependent on the age and gender.
        For those values, age and gender are required. If no age and gender values
        are given, these reference values will not be returned.
      parameters:
        - name: generic.age
          in: query
          description: Age in years
          type: number
          format: integer
        - name: generic.gender
          in: query
          description: Gender
          type: string
          enum: [Male, Female]
        - name: property
          in: query
          type: array
          collectionFormat: multi
          description: Name of the property to return the references for.
          items:
            type: string
      security:
       - api_key: []
      responses:
        200:
          description: |
            Returns a list with properties and its references, as they apply 
            for the given parameters. The only variable to the references is
            the measurements for the property itself
          schema:
            type: array
            items:
              $ref: '#/definitions/PropertyReferences'
        401:
          description: "Unauthorized: provide a valid API key"
        403:
          description: "Forbidden: the provided API key is invalid"
        500:
          description: "An internal error occurred"
  /properties.{format}:
    get:
      summary: Retrieve a list of properties supported by the current implementation.
      description: | 
        A list of properties that are supported by the current implementation is returned.
        This can be used to determine the full set of parameters for the /advices or /status
        webservice calls.
      security:
       - api_key: []
      responses:
        200:
          description: |
            Returns a list of supported properties. Each property will also
            contain a list of supported modifiers on the given property. These
            modifiers allow the called to give more details on a given nutrient
            intake.
          schema:
            type: array
            items:
              $ref: '#/definitions/Property'
        401:
          description: "Unauthorized: provide a valid API key"
        403:
          description: "Forbidden: the provided API key is invalid"
        500:
          description: "An internal error occurred"
definitions:
  Advice:
    required:
      - code
    properties:
      code:
        type: string
        description: Unique code describing the advice
      subject:
        type: string            
        description: Description of the property that this advice is about
      text:
        type: string
        description: localized advice text
  StatusValue:
    required:
      - property
      - status
    properties:
      property:
        description: The property that this status is about.
        $ref: '#/definitions/Property'
      value:
        description: A reference to the value that this status is based on
        $ref: '#/definitions/Value'
      status:
        $ref: '#/definitions/Status' 
      color:
        $ref: '#/definitions/Color'
  PropertyReferences:
    required:
      - property
      - references
    properties:
      property:
        description: The property that the references apply to
        $ref: '#/definitions/Property'
      references:
        type: array
        description: The references for the given property
        items:
          $ref: '#/definitions/Reference'
  Reference:
    required:
      - status
    properties:
      status:
        $ref: '#/definitions/Status'
      color:
        $ref: '#/definitions/Color'
      value:
        $ref: '#/definitions/ReferenceCondition'
        description: Reference condition for the property itself
      conditions:
        description: |
          List of secondary conditions on the reference. Currently the only
          secondary conditions allowed are on age and gender.
        type: array
        items:
          $ref: '#/definitions/ReferenceCondition'
  ReferenceCondition:
    properties:
      property:
        $ref: '#/definitions/Property'
      lower_boundary:
        type: number
        format: double
        description: Lowest value for the given property to apply the reference
      upper_boundary:
        type: number
        format: double
        description: Highest value for the given property to apply the reference 
      exact_match:
        type: string
        description: Exact match for the property to apply the reference
  Property:
    required:
      - id
      - name
    properties:
      id:
        type: string
        description: |
          Unique identifier of this property. Refers to either the SNOMEDCT 
          ontology or to the EUROFIR thesauri.
      name:
        type: string            
        description: Description of this property. 
      group:
        type: string
        description: Group that this property belongs to.
        enum: [Generic,Nutrient,Biomarker,Physical,SNP,Foodgroup]
      unit:
        description: The unit that values for this property should be expressed in.
        $ref: '#/definitions/Unit'
      modifiers:
        type: array
        description: A list of modifiers that is allowed for this property
        items:
          type: string
  Status:
    type: string
    description: |
      The status of this property. There are three types of status values
      that could be returned. 
      
      SNP values: Risk allele or Non-risk allele
      Intake from supplements: Yes or No
      Other values: Very low, Low, OK, High or Very high
    enum: [Very low,Low,OK,High,Very high,Risk allele,Non-risk allele,Yes,No]
  Color:
    type: string
    description: The color that is associated with the status.
    enum: [GREEN,AMBER,RED]  
  Value:
    required:
      - value
      - type
    properties:
      type: 
        type: string
        enum: [numeric,text]
        description: |
          Type of value
      value:
        type: string
        description: |
          The value that is represented. The datatype depends on the type of value.
      unit:
        $ref: '#/definitions/Unit'         
  Unit:
    required:
      - id
    properties:
      id:
        type: string
        description: |
          Unique identifier of this unit. Refers to either the SNOMEDCT 
          ontology or to the EUROFIR thesauri.
      code:
        type: string
        description: Short code describing the unit
      name:
        type: string            
        description: Human readable description of the unit
